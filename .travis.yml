# This script is used by the Travis-CI (continuous integration) testing
# framework to run Simbody's tests with every GitHub push or pull-request.
#
# Ask for Ubuntu "trusty" (14.04) to pick up newer compilers. Still have
# to upgrade gcc from trusty's 4.8 to 4.9 though, because 4.8 didn't support
# C++11 regular expressions.
sudo: required
dist: trusty
language: cpp

# For thread_local support on macOS.
osx_image: xcode8
    
matrix:
  include:
    - os: linux
      compiler: clang
      env: BTYPE=Release COV=OFF DEPLOY=yes
    - os: linux
      compiler: gcc
      env: BTYPE=Release COV=OFF DEPLOY=no
    - os: linux
      compiler: gcc
      env: BTYPE=Debug   COV=ON  DEPLOY=yes
    - os: osx
      compiler: clang
      env: BTYPE=Release COV=OFF DEPLOY=yes

addons:
  # To avoid an interactive prompt when uploading binaries to sourceforge.
  ssh_known_hosts: frs.sourceforge.net

before_install:
  ## Ensure that there are no tabs in source code.
  # GREP returns 0 (true) if there are any matches, and
  # we don't want any matches. If there are matches,
  # print a helpful message, and make the test fail by using "false".
  # The GREP command here checks for any tab characters in the the files
  # that match the specified pattern. GREP does not pick up explicit tabs
  # (e.g., literally a \t in a source file).
  # This grep command is invalid on osx.
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then if grep --recursive --include={*.cpp,*.c,*.h,*.md,*.yml,*.cmake.*.xml,*.html,*.in,*.txt} -P "\t" . ; then echo "Tabs found in the lines shown above. See CONTRIBUTING.md about tabs."; false; else echo "Repo passed no-tabs check."; fi; else echo "No-tabs check not performed."; fi
  
  ## Dependencies for Simbody.
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get --yes update; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get --yes install liblapack-dev; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get --yes install freeglut3-dev libxi-dev libxmu-dev; fi

  # C++11 on Ubuntu. Update to gcc 4.9, which provides full C++11 support.  We
  # use this script because if building Simbody with C++11, we need gcc-4.9,
  # and the Travis Ubuntu 12.04 machines have an older version of gcc. Even if
  # building with Clang, we need the newer libstdc++ that we get by updating to
  # gcc-4.9.  See https://github.com/travis-ci/travis-ci/issues/979.
  - if [[ "$TRAVIS_OS_NAME" = "linux" ]]; then sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y; fi
  - if [[ "$TRAVIS_OS_NAME" = "linux" ]]; then sudo apt-get --yes update -qq; fi
  - if [[ "$TRAVIS_OS_NAME" = "linux" ]]; then sudo apt-get --yes install -qq g++-4.9; fi
  - if [[ "$TRAVIS_OS_NAME" = "linux" && "$CXX" = "g++" ]]; then export CXX="g++-4.9" CC="gcc-4.9"; fi
  
  # CMake 2.8.11 on Ubuntu.
  #- if [[ "$TRAVIS_OS_NAME" = "linux" ]]; then sudo add-apt-repository ppa:kalakris/cmake -y; fi
  #- if [[ "$TRAVIS_OS_NAME" = "linux" ]]; then sudo apt-get --yes update -qq; fi
  #- if [[ "$TRAVIS_OS_NAME" = "linux" ]]; then sudo apt-get --yes install cmake; fi

install:
  - mkdir -p $TRAVIS_BUILD_DIR/simbody-build && cd $TRAVIS_BUILD_DIR/simbody-build
  # Configure.
  - cmake $TRAVIS_BUILD_DIR -DCMAKE_BUILD_TYPE=$BTYPE -DCMAKE_CXX_FLAGS=-Werror -DSIMBODY_COVERAGE:BOOL=$COV -DCMAKE_INSTALL_PREFIX=~/simbody
  # Build.
  - make -j8

script:
  ## Test Simbody.
  - ctest -j8 --output-on-failure

  ## Run coverage and send result to codecov.io
  - if [[ "$COV" == "ON" ]]; then echo "Running coverage target"; fi
  - if [[ "$COV" == "ON" ]]; then make coverage; fi
  - if [[ "$COV" == "ON" ]]; then echo "Sending coverage result to codecov.io"; fi
  - if [[ "$COV" == "ON" ]]; then bash <(curl -s https://codecov.io/bash) -X gcov; fi

  ## Make sure we can install with no issues.
  - make -j8 install

before_deploy:
  ## Zip up the installation using a file name that identifies where the
  # binaries were built.
  - mkdir ~/to_deploy
  - export ZIPNAME=simbody-latest_${TRAVIS_OS_NAME}_${BTYPE}.zip
  # Zip up simbody relative to the home directory; must change to home dir.
  - cd ~
  # Leave symlinks intact.
  - zip --symlinks --recurse-paths --quiet ~/to_deploy/$ZIPNAME simbody

  ## Set up ssh for sourceforge.
  # Decrypt the private key stored in the repository to the tmp dir.
  - openssl aes-256-cbc -K $encrypted_cc3f5ebf7a63_key -iv $encrypted_cc3f5ebf7a63_iv -in $TRAVIS_BUILD_DIR/doc/.deploy_myosin_sourceforge_rsa.enc -out /tmp/deploy_myosin_sourceforge_rsa -d
  # Start the ssh agent.
  - eval "$(ssh-agent -s)"
  # Register this private key with this client (the travis machine).
  - chmod 600 /tmp/deploy_myosin_sourceforge_rsa
  - ssh-add /tmp/deploy_myosin_sourceforge_rsa

deploy:
  # Uploads to sourceforge.net/projects/myosin
  # See https://docs.travis-ci.com/user/deployment/custom/
  # '--archive' preserves symlinks.
  provider: script
  skip_cleanup: true
  script: rsync --archive --compress --verbose ~/to_deploy/$ZIPNAME opensim-bot@frs.sourceforge.net:/home/frs/project/myosin/simbody/
  on:
    # Upload for both linux and OSX. 
    branch: master 
    condition: "$DEPLOY = yes"
 
# Process for securely uploading files to Sourceforge, taken from
# https://oncletom.io/2016/travis-ssh-deploy/:
#
# Contact chrisdembia if you need the login information for opensim-bot at
# sourceforge, to manage myosin.sourceforge.net.
#
# You must install the travis command-line tool: `gem install travis`
# Locally, from the root of the simbody repository:
# Create a 4096-bit RSA key with comment, private key 
# $ ssh-keygen -t rsa -b 4096 -C 'opensim-bot@sourceforge.net' -f doc/.deploy_myosin_sourceforge_rsa
# When prompted for a passphrase, just hit enter (twice).
# Encrypt the private key, add decryption code to .travis.yml. First make a
# backup copy of .travis.yml.
# $ travis encrypt-file doc/.deploy_myosin_sourceforge_rsa --add
# Manually edit the .travis.yml file to clean up the added lines and restore
# comments to the file; put the decryption in the before_deploy step.
# Remove the unencrypted private key. DO NOT commmit the unencrypted private
# key.
# $ rm -f doc/.deploy_myosin_sourceforge_rsa
# Move the encrypted key to the doc folder.
# $ mv .deploy_myosin_sourceforge_rsa.enc doc/
# Manually, log into the sourceforge website (user opensim-bot) and add the
# public key (contents of doc/.deploy_myosin_sourceforge_rsa.pub) in
# Profile > SSH Settings.
# Now you can delete the public key file from your local machine.
# Commit the encrypted private key and the changes to .travis.yml.
# $ git commit .travis.yml doc/.deploy_myosin_sourceforge_rsa.enc
