# SimbodyConfig.cmake

# Adapted from FindSimbody.cmake
#
# This should define the following:
#   Simbody_FOUND - Whether search for Simbody libraries and headers succeeded.
#   Simbody_ROOT_DIR - the installation directory; all the pieces must be
#                      found together
#   Simbody_INCLUDE_DIR - location of Simbody.h
#   Simbody_LIB_DIR     - location of libSimTKsimbody.{a,so,dylib} or SimTKsimbody.lib
#   Simbody_BIN_DIR     - location of VisualizerGUI and .dll's on Windows
#   Simbody_LIBRARIES   - suitable for target_link_libraries(); includes
#                           both optimized and debug libraries if both are
#                           available
#   Simbody_STATIC_LIBRARIES - suitable for target_link_libraries(); includes
#                              both optimized and debug static libraries if
#                              both are available
if (@PKG_NAME@_CONFIG_INCLUDED)
  return()
endif()
set(@PKG_NAME@_CONFIG_INCLUDED TRUE)

list(APPEND @PKG_NAME@_ROOT_DIR @CMAKE_INSTALL_PREFIX@)

list(APPEND @PKG_NAME@_INCLUDE_DIR @CMAKE_INSTALL_PREFIX@/@SIMBODY_INCLUDE_INSTALL_DIR@)

list(APPEND @PKG_NAME@_LIB_DIR @CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@)

list(APPEND @PKG_NAME@_BIN_DIR @SIMBODY_VISUALIZER_INSTALL_DIR@)

list(APPEND @PKG_NAME@_CFLAGS -I@CMAKE_INSTALL_PREFIX@/@SIMBODY_INCLUDE_INSTALL_DIR@)

# Set extra libraries to link against
if (WIN32)
  set(Simbody_LAPACK_LIBRARY_LIST liblapack;libblas)
else()
  set(Simbody_LAPACK_LIBRARY_LIST lapack;blas)
endif()
if (WIN32)
  if( ${CMAKE_SIZEOF_VOID_P} EQUAL 8 )
    set(Simbody_EXTRA_LIBRARY_LIST pthreadVC2_x64)
  else()
    set(Simbody_EXTRA_LIBRARY_LIST pthreadVC2)
  endif()
elseif (APPLE)
  set(Simbody_EXTRA_LIBRARY_LIST pthread;dl)
else()
  set(Simbody_EXTRA_LIBRARY_LIST pthread;rt;dl;m)
endif()

# Find out which of the libraries are available.
find_library(Simbody_LIBRARY NAMES SimTKsimbody
    PATHS ${Simbody_LIB_DIR}
    DOC "This is the main Simbody library."
    NO_DEFAULT_PATH)
find_library(Simbody_STATIC_LIBRARY NAMES SimTKsimbody_static
    PATHS ${Simbody_LIB_DIR}
    DOC "This is the main Simbody static library."
    NO_DEFAULT_PATH)
find_library(Simbody_DEBUG_LIBRARY NAMES SimTKsimbody_d
    PATHS ${Simbody_LIB_DIR}
    DOC "This is the main Simbody debug library."
    NO_DEFAULT_PATH)
find_library(Simbody_STATIC_DEBUG_LIBRARY NAMES SimTKsimbody_static_d
    PATHS ${Simbody_LIB_DIR}
    DOC "This is the main Simbody static debug library."
    NO_DEFAULT_PATH)


# Set composite Simbody_LIBRARIES variable
set(LIBS)
if(Simbody_LIBRARY AND Simbody_DEBUG_LIBRARY)
  foreach(lib @PKG_LIBRARIES@)
    set(onelib "${lib}-NOTFOUND")
    find_library(onelib ${lib}
      PATHS ${Simbody_LIB_DIR}
      NO_DEFAULT_PATH
      )
    if(NOT onelib)
      message(FATAL_ERROR "Library '${lib}' in package Simbody is not installed properly")
    endif()
    set(LIBS ${LIBS} optimized "${onelib}" debug "${onelib}_d")
  endforeach()
elseif(Simbody_LIBRARY)
  foreach(lib @PKG_LIBRARIES@)
    set(onelib "${lib}-NOTFOUND")
    find_library(onelib ${lib}
      PATHS ${Simbody_LIB_DIR}
      NO_DEFAULT_PATH
      )
    if(NOT onelib)
      message(FATAL_ERROR "Library '${lib}' in package Simbody is not installed properly")
    endif()
    set(LIBS ${LIBS} "${onelib}")
  endforeach()
elseif(Simbody_DEBUG_LIBRARY)
  foreach(lib @PKG_LIBRARIES@)
    set(lib "${lib}_d")
    set(onelib "${lib}-NOTFOUND")
    find_library(onelib ${lib}
      PATHS ${Simbody_LIB_DIR}
      NO_DEFAULT_PATH
      )
    if(NOT onelib)
      message(FATAL_ERROR "Library '${lib}' in package Simbody is not installed properly")
    endif()
    set(LIBS ${LIBS} "${onelib}")
  endforeach()
endif()

if (LIBS)
    foreach(lapack_lib IN LISTS Simbody_LAPACK_LIBRARY_LIST)
        set(LIBS ${LIBS} "${lapack_lib}")
    endforeach()
    foreach(extra_lib IN LISTS Simbody_EXTRA_LIBRARY_LIST)
        set(LIBS ${LIBS} "${extra_lib}")
    endforeach()
    set(Simbody_LIBRARIES ${LIBS} CACHE STRING 
        "Simbody dynamic libraries" FORCE)
else()
    set(Simbody_LIBRARIES Simbody_LIBRARIES-NOTFOUND CACHE STRING 
        "Simbody dynamic libraries" FORCE)
endif()

# Static library
set(LIBS)
if(Simbody_STATIC_LIBRARY AND Simbody_STATIC_DEBUG_LIBRARY)
  foreach(lib @PKG_LIBRARIES@)
    set(lib "${lib}_static")
    set(onelib "${lib}-NOTFOUND")
    find_library(onelib ${lib}
      PATHS ${Simbody_LIB_DIR}
      NO_DEFAULT_PATH
      )
    if(NOT onelib)
      message(FATAL_ERROR "Library '${lib}' in package Simbody is not installed properly")
    endif()
    set(LIBS ${LIBS} optimized "${onelib}" debug "${onelib}_d")
  endforeach()
elseif(Simbody_STATIC_LIBRARY)
  foreach(lib @PKG_LIBRARIES@)
    set(lib "${lib}_static")
    set(onelib "${lib}-NOTFOUND")
    find_library(onelib ${lib}
      PATHS ${Simbody_LIB_DIR}
      NO_DEFAULT_PATH
      )
    if(NOT onelib)
      message(FATAL_ERROR "Library '${lib}' in package Simbody is not installed properly")
    endif()
    set(LIBS ${LIBS} "${onelib}")
  endforeach()
elseif(Simbody_STATIC_DEBUG_LIBRARY)
  foreach(lib @PKG_LIBRARIES@)
    set(lib "${lib}_static_d")
    set(onelib "${lib}-NOTFOUND")
    find_library(onelib ${lib}
      PATHS ${Simbody_LIB_DIR}
      NO_DEFAULT_PATH
      )
    if(NOT onelib)
      message(FATAL_ERROR "Library '${lib}' in package Simbody is not installed properly")
    endif()
    set(LIBS ${LIBS} "${onelib}")
  endforeach()
endif()

if (LIBS)
    # these aren't available in static
    foreach(lapack_lib IN LISTS Simbody_LAPACK_LIBRARY_LIST)
        set(LIBS ${LIBS} "${lapack_lib}")
    endforeach()
    foreach(extra_lib IN LISTS Simbody_EXTRA_LIBRARY_LIST)
        set(LIBS ${LIBS} "${extra_lib}")
    endforeach()
    set(Simbody_STATIC_LIBRARIES "${LIBS}" CACHE STRING 
        "Simbody static libraries" FORCE)
else()
    set(Simbody_STATIC_LIBRARIES Simbody_STATIC_LIBRARIES-NOTFOUND CACHE STRING 
        "Simbody static libraries" FORCE)
endif()

# This CMake-supplied script provides standard error handling.
include(FindPackageHandleStandardArgs OPTIONAL)
find_package_handle_standard_args(Simbody DEFAULT_MSG 
	Simbody_INCLUDE_DIR)

# Not all the variables we produced need be returned.
unset(Simbody_LIBRARY CACHE)
unset(Simbody_DEBUG_LIBRARY CACHE)
unset(Simbody_STATIC_LIBRARY CACHE)
unset(Simbody_STATIC_DEBUG_LIBRARY CACHE)
mark_as_advanced(Simbody_LIBRARIES Simbody_STATIC_LIBRARIES)

list(APPEND @PKG_NAME@_LDFLAGS -Wl,-rpath,@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@)
list(APPEND @PKG_NAME@_LDFLAGS -L@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@)
